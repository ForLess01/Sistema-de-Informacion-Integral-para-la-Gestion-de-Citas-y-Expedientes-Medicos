# Configuración de pytest para el sistema médico

[tool:pytest]
# Configuración de Django
DJANGO_SETTINGS_MODULE = medical_system.settings.testing.testing.testing.testing
python_files = tests.py test_*.py *_tests.py
python_classes = Test* *Tests *TestCase
python_functions = test_*

# Directorio de tests
testpaths = 
    tests
    authentication/tests
    appointments/tests
    medical_records/tests
    pharmacy/tests
    emergency/tests
    notifications/tests
    reports/tests
    api_external/tests

# Opciones adicionales
addopts = 
    # Mostrar salida detallada
    -v
    # Configuración de Django
    --ds=medical_system.settings.testing.testing.testing.testing
    # Reporte de cobertura
    --cov=.
    --cov-report=term-missing:skip-covered
    # Crear DB de tests
    --create-db
    # Fallar si hay warnings
    --strict-markers

# Marcadores personalizados
markers =
    slow: marca tests que son lentos (deselect with '-m "not slow"')
    integration: marca tests de integración
    unit: marca tests unitarios
    api: marca tests de API
    performance: marca tests de rendimiento
    smoke: marca tests de smoke testing
    regression: marca tests de regresión
    security: marca tests de seguridad
    requires_db: marca tests que requieren base de datos
    requires_redis: marca tests que requieren Redis
    requires_celery: marca tests que requieren Celery
    skip_in_ci: marca tests para saltar en CI
    flaky: marca tests que pueden fallar ocasionalmente

# Configuración de logging durante tests
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Captura de logs
log_capture = true
log_level = DEBUG

# Filtros de warnings
filterwarnings =
    # Ignorar warnings de deprecación de Django
    ignore::django.utils.deprecation.RemovedInDjango50Warning
    ignore::django.utils.deprecation.RemovedInDjango51Warning
    # Ignorar warnings de bibliotecas externas
    ignore::DeprecationWarning:django.*
    ignore::PendingDeprecationWarning
    # Convertir warnings específicos en errores
    error::UserWarning:authentication.*
    error::UserWarning:appointments.*
    error::UserWarning:medical_records.*

# Configuración de fixtures
usefixtures = 
    db
    client
    admin_user

# Configuración de coverage
[coverage:run]
plugins = 
    django_coverage_plugin

# Configuración para tests en paralelo
[tool:pytest:xdist]
looponfail = False
numprocesses = auto

# Configuración de benchmarks
[tool:pytest:benchmark]
disable_gc = true
min_rounds = 5
min_time = 0.000005
max_time = 1.0
calibration_precision = 10
warmup = true
warmup_iterations = 100000

# Configuración de timeout
[tool:pytest:timeout]
timeout = 300
timeout_method = thread
timeout_func_only = false

# Paths de Python
[tool:pytest:pythonpath]
pythonpath = . backend

# Variables de entorno para tests
[tool:pytest:env]
DJANGO_SETTINGS_MODULE = medical_system.settings.testing.testing.testing.testing
TESTING = true
CELERY_ALWAYS_EAGER = true
CELERY_EAGER_PROPAGATES_EXCEPTIONS = true
USE_TZ = true
