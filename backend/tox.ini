# Configuración de tox para testing en múltiples entornos

[tox]
envlist = 
    # Entornos de Python
    py38-django32
    py39-django32
    py39-django40
    py310-django40
    py310-django41
    py311-django41
    py311-django42
    # Entornos especiales
    flake8
    mypy
    black
    isort
    safety
    docs
    coverage

skipsdist = True
skip_missing_interpreters = True

[testenv]
# Directorio de trabajo
changedir = {toxinidir}/backend

# Dependencias base
deps =
    django32: Django>=3.2,<3.3
    django40: Django>=4.0,<4.1
    django41: Django>=4.1,<4.2
    django42: Django>=4.2,<4.3
    -r{toxinidir}/requirements.txt
    -r{toxinidir}/requirements-test.txt

# Variables de entorno
setenv =
    PYTHONPATH = {toxinidir}/backend
    DJANGO_SETTINGS_MODULE = backend.settings.test
    TESTING = True

# Comandos a ejecutar
commands =
    python manage.py check
    python manage.py makemigrations --check --dry-run
    pytest {posargs}

# Pasar variables de entorno del host
passenv = 
    DATABASE_URL
    REDIS_URL
    SECRET_KEY
    CI
    TRAVIS
    TRAVIS_*
    GITHUB_*

[testenv:flake8]
# Linting con flake8
deps = 
    flake8
    flake8-django
    flake8-isort
    flake8-docstrings
    flake8-bugbear
    flake8-comprehensions
    flake8-print

commands = 
    flake8 {toxinidir}/backend

[testenv:mypy]
# Type checking con mypy
deps = 
    mypy
    django-stubs
    djangorestframework-stubs
    types-requests
    types-redis

commands = 
    mypy {toxinidir}/backend

[testenv:black]
# Formateo de código con black
deps = black

commands = 
    black --check --diff {toxinidir}/backend

[testenv:isort]
# Ordenamiento de imports con isort
deps = isort

commands = 
    isort --check-only --diff {toxinidir}/backend

[testenv:safety]
# Verificación de vulnerabilidades
deps = safety

commands = 
    safety check -r {toxinidir}/requirements.txt

[testenv:docs]
# Generación de documentación
changedir = {toxinidir}/docs
deps = 
    sphinx
    sphinx-rtd-theme
    sphinx-autodoc-typehints

commands = 
    sphinx-build -W -b html -d {envtmpdir}/doctrees . {envtmpdir}/html

[testenv:coverage]
# Reporte de cobertura completo
deps = 
    coverage[toml]
    pytest-cov

commands =
    coverage erase
    coverage run -m pytest
    coverage report
    coverage html
    coverage xml

[testenv:performance]
# Tests de rendimiento
deps = 
    pytest-benchmark
    memory-profiler
    py-spy

commands = 
    pytest tests/test_performance.py -v --benchmark-only

[testenv:security]
# Tests de seguridad
deps = 
    bandit
    safety
    pip-audit

commands = 
    bandit -r {toxinidir}/backend -f json -o {envtmpdir}/bandit.json
    safety check
    pip-audit

[testenv:integration]
# Tests de integración con servicios externos
deps = 
    docker-compose
    
commands_pre = 
    docker-compose -f docker-compose.test.yml up -d
    
commands = 
    pytest tests/test_integration.py -v -m integration
    
commands_post = 
    docker-compose -f docker-compose.test.yml down

# Configuración de flake8
[flake8]
max-line-length = 120
exclude = 
    .git,
    __pycache__,
    .tox,
    venv,
    env,
    migrations,
    .venv,
    build,
    dist
    
ignore = 
    # Ignorar docstrings faltantes en métodos mágicos
    D105,
    # Ignorar docstrings en métodos públicos anidados
    D106,
    # Ignorar docstrings en clases anidadas públicas
    D107,
    # Líneas muy largas con URLs
    E501,
    # Imports no usados en __init__.py
    F401,
    # Variables no usadas
    F841

per-file-ignores = 
    # Ignorar imports no usados en archivos __init__
    __init__.py:F401
    # Ignorar complejidad en settings
    settings/*.py:C901
    # Ignorar docstrings en tests
    test_*.py:D100,D101,D102,D103

# Configuración de isort
[isort]
profile = black
multi_line_output = 3
include_trailing_comma = True
force_grid_wrap = 0
use_parentheses = True
ensure_newline_before_comments = True
line_length = 120
skip_gitignore = True
known_django = django
known_rest_framework = rest_framework
sections = FUTURE,STDLIB,DJANGO,REST_FRAMEWORK,THIRDPARTY,FIRSTPARTY,LOCALFOLDER

# Configuración de mypy
[mypy]
python_version = 3.9
check_untyped_defs = True
ignore_missing_imports = True
warn_unused_ignores = True
warn_redundant_casts = True
warn_unused_configs = True
plugins = mypy_django_plugin.main, mypy_drf_plugin.main

[mypy.plugins.django-stubs]
django_settings_module = backend.settings.test

# Configuración de bandit
[bandit]
exclude_dirs = 
    /tests/,
    /migrations/,
    /venv/,
    /.tox/
    
skips = 
    # Saltar assert_used test
    B101,
    # Saltar hardcoded_password_string
    B105