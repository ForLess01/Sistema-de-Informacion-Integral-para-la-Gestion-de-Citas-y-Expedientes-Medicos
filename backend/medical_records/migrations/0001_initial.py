# Generated by Django 5.2.3 on 2025-07-09 07:56

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("appointments", "0002_initial"),
        ("pharmacy", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="MedicalRecord",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("record_date", models.DateField(default=django.utils.timezone.now)),
                ("description", models.TextField()),
                ("diagnosis", models.TextField()),
                ("treatment", models.TextField()),
                ("notes", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "doctor",
                    models.ForeignKey(
                        limit_choices_to={"role": "doctor"},
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="recorded_by",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "patient",
                    models.ForeignKey(
                        limit_choices_to={"role": "patient"},
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="medical_records",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Registro Médico",
                "verbose_name_plural": "Registros Médicos",
                "ordering": ["-record_date", "-created_at"],
            },
        ),
        migrations.CreateModel(
            name="MedicalDocument",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("document_name", models.CharField(max_length=255)),
                (
                    "document_file",
                    models.FileField(
                        upload_to="medical_documents/%Y/%m/%d/",
                        validators=[
                            django.core.validators.FileExtensionValidator(
                                ["pdf", "jpg", "jpeg", "png"]
                            )
                        ],
                    ),
                ),
                ("uploaded_at", models.DateTimeField(auto_now_add=True)),
                (
                    "record",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="documents",
                        to="medical_records.medicalrecord",
                    ),
                ),
            ],
            options={
                "verbose_name": "Documento Médico",
                "verbose_name_plural": "Documentos Médicos",
                "ordering": ["-uploaded_at"],
            },
        ),
        migrations.CreateModel(
            name="Prescription",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "prescription_id",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                ("issue_date", models.DateTimeField(default=django.utils.timezone.now)),
                ("valid_until", models.DateField()),
                ("diagnosis", models.TextField()),
                (
                    "instructions",
                    models.TextField(
                        help_text="Instrucciones generales para el paciente"
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "appointment",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="prescriptions",
                        to="appointments.appointment",
                    ),
                ),
                (
                    "doctor",
                    models.ForeignKey(
                        limit_choices_to={"role": "doctor"},
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="issued_prescriptions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "medical_record",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="prescriptions",
                        to="medical_records.medicalrecord",
                    ),
                ),
                (
                    "patient",
                    models.ForeignKey(
                        limit_choices_to={"role": "patient"},
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="prescriptions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Receta Médica",
                "verbose_name_plural": "Recetas Médicas",
                "ordering": ["-issue_date"],
            },
        ),
        migrations.CreateModel(
            name="PrescriptionItem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("dosage", models.CharField(help_text="Ej: 500mg", max_length=100)),
                (
                    "frequency",
                    models.CharField(help_text="Ej: Cada 8 horas", max_length=100),
                ),
                (
                    "duration",
                    models.CharField(help_text="Ej: Por 7 días", max_length=100),
                ),
                (
                    "quantity",
                    models.PositiveIntegerField(help_text="Cantidad total a dispensar"),
                ),
                (
                    "instructions",
                    models.TextField(
                        blank=True,
                        help_text="Instrucciones específicas para este medicamento",
                    ),
                ),
                ("is_dispensed", models.BooleanField(default=False)),
                ("dispensed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "dispensed_by",
                    models.ForeignKey(
                        blank=True,
                        limit_choices_to={"role": "pharmacist"},
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="dispensed_items",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "medication",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="pharmacy.medication",
                    ),
                ),
                (
                    "prescription",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="items",
                        to="medical_records.prescription",
                    ),
                ),
            ],
            options={
                "verbose_name": "Item de Receta",
                "verbose_name_plural": "Items de Receta",
                "ordering": ["id"],
            },
        ),
        migrations.CreateModel(
            name="VitalSigns",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "blood_pressure_systolic",
                    models.IntegerField(
                        help_text="Presión sistólica en mmHg",
                        validators=[
                            django.core.validators.MinValueValidator(60),
                            django.core.validators.MaxValueValidator(250),
                        ],
                    ),
                ),
                (
                    "blood_pressure_diastolic",
                    models.IntegerField(
                        help_text="Presión diastólica en mmHg",
                        validators=[
                            django.core.validators.MinValueValidator(40),
                            django.core.validators.MaxValueValidator(150),
                        ],
                    ),
                ),
                (
                    "heart_rate",
                    models.IntegerField(
                        help_text="Frecuencia cardíaca en latidos por minuto",
                        validators=[
                            django.core.validators.MinValueValidator(30),
                            django.core.validators.MaxValueValidator(250),
                        ],
                    ),
                ),
                (
                    "respiratory_rate",
                    models.IntegerField(
                        help_text="Frecuencia respiratoria por minuto",
                        validators=[
                            django.core.validators.MinValueValidator(8),
                            django.core.validators.MaxValueValidator(60),
                        ],
                    ),
                ),
                (
                    "temperature",
                    models.DecimalField(
                        decimal_places=1,
                        help_text="Temperatura en grados Celsius",
                        max_digits=4,
                        validators=[
                            django.core.validators.MinValueValidator(35.0),
                            django.core.validators.MaxValueValidator(42.0),
                        ],
                    ),
                ),
                (
                    "oxygen_saturation",
                    models.IntegerField(
                        help_text="Saturación de oxígeno en porcentaje",
                        validators=[
                            django.core.validators.MinValueValidator(70),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "weight",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Peso en kilogramos",
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(0.5),
                            django.core.validators.MaxValueValidator(500),
                        ],
                    ),
                ),
                (
                    "height",
                    models.DecimalField(
                        decimal_places=1,
                        help_text="Altura en centímetros",
                        max_digits=4,
                        validators=[
                            django.core.validators.MinValueValidator(30),
                            django.core.validators.MaxValueValidator(250),
                        ],
                    ),
                ),
                ("recorded_at", models.DateTimeField(auto_now_add=True)),
                ("notes", models.TextField(blank=True)),
                (
                    "appointment",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="vital_signs",
                        to="appointments.appointment",
                    ),
                ),
                (
                    "patient",
                    models.ForeignKey(
                        limit_choices_to={"role": "patient"},
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="vital_signs",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "recorded_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="recorded_vital_signs",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Signos Vitales",
                "verbose_name_plural": "Signos Vitales",
                "ordering": ["-recorded_at"],
            },
        ),
        migrations.CreateModel(
            name="Allergy",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "allergen",
                    models.CharField(
                        help_text="Sustancia que causa la alergia", max_length=200
                    ),
                ),
                (
                    "allergen_type",
                    models.CharField(
                        choices=[
                            ("medication", "Medicamento"),
                            ("food", "Alimento"),
                            ("environmental", "Ambiental"),
                            ("other", "Otro"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "severity",
                    models.CharField(
                        choices=[
                            ("mild", "Leve"),
                            ("moderate", "Moderada"),
                            ("severe", "Severa"),
                            ("life_threatening", "Amenaza la vida"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "reaction",
                    models.TextField(help_text="Descripción de la reacción alérgica"),
                ),
                ("first_observed", models.DateField(blank=True, null=True)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_allergies",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "patient",
                    models.ForeignKey(
                        limit_choices_to={"role": "patient"},
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="allergies",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Alergia",
                "verbose_name_plural": "Alergias",
                "ordering": ["-severity", "allergen"],
                "unique_together": {("patient", "allergen")},
            },
        ),
        migrations.CreateModel(
            name="LabTest",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("test_name", models.CharField(max_length=200)),
                ("test_code", models.CharField(blank=True, max_length=50)),
                ("description", models.TextField(blank=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("ordered", "Ordenado"),
                            ("sample_collected", "Muestra Recolectada"),
                            ("in_progress", "En Proceso"),
                            ("completed", "Completado"),
                            ("cancelled", "Cancelado"),
                        ],
                        default="ordered",
                        max_length=20,
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[("normal", "Normal"), ("urgent", "Urgente")],
                        default="normal",
                        max_length=10,
                    ),
                ),
                (
                    "ordered_date",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                ("collection_date", models.DateTimeField(blank=True, null=True)),
                ("result_date", models.DateTimeField(blank=True, null=True)),
                ("results", models.TextField(blank=True)),
                ("normal_range", models.CharField(blank=True, max_length=100)),
                (
                    "result_file",
                    models.FileField(
                        blank=True,
                        null=True,
                        upload_to="lab_results/%Y/%m/%d/",
                        validators=[
                            django.core.validators.FileExtensionValidator(
                                ["pdf", "jpg", "jpeg", "png"]
                            )
                        ],
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("notes", models.TextField(blank=True)),
                (
                    "appointment",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="lab_tests",
                        to="appointments.appointment",
                    ),
                ),
                (
                    "ordered_by",
                    models.ForeignKey(
                        limit_choices_to={"role": "doctor"},
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="ordered_lab_tests",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "patient",
                    models.ForeignKey(
                        limit_choices_to={"role": "patient"},
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="lab_tests",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "medical_record",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="lab_tests",
                        to="medical_records.medicalrecord",
                    ),
                ),
            ],
            options={
                "verbose_name": "Examen de Laboratorio",
                "verbose_name_plural": "Exámenes de Laboratorio",
                "ordering": ["-ordered_date"],
                "indexes": [
                    models.Index(
                        fields=["patient", "status"],
                        name="medical_rec_patient_444b60_idx",
                    ),
                    models.Index(
                        fields=["ordered_date"], name="medical_rec_ordered_f5c096_idx"
                    ),
                ],
            },
        ),
        migrations.AddIndex(
            model_name="prescription",
            index=models.Index(
                fields=["patient", "is_active"], name="medical_rec_patient_cfac62_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="prescription",
            index=models.Index(
                fields=["doctor", "issue_date"], name="medical_rec_doctor__be0516_idx"
            ),
        ),
    ]
